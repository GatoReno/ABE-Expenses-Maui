using System;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Collections.ObjectModel;
using AbeXP.Models;
using AbeXP.Views;

namespace AbeXP.ViewModels
{
    public class TransactionGroup : ObservableCollection<object>
    {
        public DateTime Date { get; private set; }

        public string DateString => Date.ToString("dd/MM/yyyy");

        public TransactionGroup(DateTime date, System.Collections.Generic.IEnumerable<object> items) : base(items)
        {
            Date = date;
        }
    }




    public partial class MainPageViewModel : ObservableObject
    {
        // Colecciones y filtros de antes
        [ObservableProperty] private List<string> filters = new() { "Todos", "Expenses", "Loans" };
        [ObservableProperty] private string selectedFilter;
        [ObservableProperty] private DateTime selectedDate = DateTime.Today;

        [ObservableProperty] private ObservableCollection<TransactionGroup> transactions = new();

   private ObservableCollection<object> _allItems = new();

        public MainPageViewModel()
        {
            LoadMockData();
        }

        private void LoadMockData()
        {
            // ðŸ”¹ Datos simulados (mock)
            var expenses = new List<Models.Expense>
        {
            new() { Description = "CafÃ©", Amount = 45 },
            new() { Description = "Supermercado", Amount = 1200 }
        };

            var loans = new List<Models.Loan>
        {
            new() { PersonName = "Juan", Amount = 500, IsPaid = false },
            new() { PersonName = "Ana", Amount = 1500, IsPaid = true }
        };

            Transactions.Clear();
            Transactions.Add(new TransactionGroup(DateTime.Today, expenses.Cast<object>().ToList()));
            Transactions.Add(new TransactionGroup(DateTime.Today, loans.Cast<object>().ToList()));
        }

        // ðŸ”¹ Comando del botÃ³n âž•
        [RelayCommand]
        private async Task AddTransactionAsync()
        {
            string action = await App.Current.MainPage.DisplayActionSheet(
                "Agregar TransacciÃ³n",
                "Cancelar",
                null,
                "Expense",
                "Loan");

            if (action == "Expense")
            {
                await Shell.Current.GoToAsync(nameof(ExpenseFormView));
            }
            else if (action == "Loan")
            {
                await Shell.Current.GoToAsync(nameof(LoanFormView));
              
            }
        }

        // ðŸ”¹ Filtros
        [RelayCommand]
        private void ApplyFilters()
        {
            Transactions.Clear();

            var filtered = _allItems.AsEnumerable();

            if (SelectedFilter == "Expense")
                filtered = filtered.Where(x => x is Expense);
            else if (SelectedFilter == "Loan")
                filtered = filtered.Where(x => x is Loan);

            if (SelectedDate != null)
            {
                filtered = filtered.Where(x =>
                    (x is Expense e && e.Date.Date == SelectedDate.Value.Date) ||
                    (x is Loan l && l.DateGiven.Date == SelectedDate.Value.Date));
            }

            var grouped = filtered
                .GroupBy(x =>
                    x is Expense e ? e.Date.Date :
                    x is Loan l ? l.DateGiven.Date : DateTime.MinValue)
                .OrderByDescending(g => g.Key);

            foreach (var group in grouped)
            {
                var transactionGroup = new TransactionGroup(group.Key, group.ToList());
                Transactions.Add(transactionGroup);
            }
        }
    }
}